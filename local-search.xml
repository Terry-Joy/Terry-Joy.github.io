<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go基础学习_2</title>
    <link href="/2022/04/29/golang/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/learn_2/"/>
    <url>/2022/04/29/golang/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/learn_2/</url>
    
    <content type="html"><![CDATA[<h2 id="fmt库"><a href="#fmt库" class="headerlink" title="fmt库"></a>fmt库</h2><p>今天主要讲讲go的fmt标准库</p><p>fmt主要负责输出与输入,区别在于$Print$函数直接输出内容，$Printf$函数支持格式化输出字符串，$Println$函数会在输出内容的结尾添加一个换行符。</p><h3 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h3><figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs go">fmt.Print(<span class="hljs-string">&quot;xxx&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;%v&quot;</span>, xxx)<br>fmt.Println(<span class="hljs-string">&quot;xx&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Fprint"><a href="#Fprint" class="headerlink" title="Fprint"></a>Fprint</h3><p>Fprint系列函数会将内容输出到一个io.Writer接口类型的变量w中，我们通常用这个函数往文件中写入内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fprint</span><span class="hljs-params">(w io.Writer, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fprintf</span><span class="hljs-params">(w io.Writer, format <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fprintln</span><span class="hljs-params">(w io.Writer, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><br>fileObj, err := os.OpenFile(<span class="hljs-string">&quot;./xx.txt&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0644</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;打开文件出错，err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>name := <span class="hljs-string">&quot;沙河小王子&quot;</span><br><span class="hljs-comment">// 向打开的文件句柄中写入内容</span><br>fmt.Fprintf(fileObj, <span class="hljs-string">&quot;往文件中写如信息：%s&quot;</span>, name)<br></code></pre></td></tr></table></figure><h3 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h3><p>Sprint系列函数会把传入的数据生成并返回一个字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s1 := fmt.Sprint(<span class="hljs-string">&quot;摆了&quot;</span>)<br>name := <span class="hljs-string">&quot;hha&quot;</span><br>age := <span class="hljs-number">17</span><br>s2 := fmt.Sprintf(<span class="hljs-string">&quot;%s %s&quot;</span>, name, age)<br></code></pre></td></tr></table></figure><h3 id="Errorf"><a href="#Errorf" class="headerlink" title="Errorf"></a>Errorf</h3><p>Errorf函数根据format参数生成格式化字符串并返回一个包含该字符串的错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Errorf</span><span class="hljs-params">(format <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span><br></code></pre></td></tr></table></figure><h2 id="格式化占位符"><a href="#格式化占位符" class="headerlink" title="格式化占位符"></a>格式化占位符</h2><ul><li>通用占位符<br>%v        值的默认格式表示<br>%+v        类似%v，但输出结构体时会添加字段名<br>%#v        值的Go语法表示<br>%T        打印值的类型<br>%%        百分号<br/></li><li>bool型占位符<br>%t    true/false<br/></li><li>整型（其实和c差不多）<br>%b    表示为二进制<br>%c    该值对应的unicode码值<br>%d    表示为十进制<br>%o    表示为八进制<br>%x    表示为十六进制，使用a-f<br>%X    表示为十六进制，使用A-F<br>%U    表示为Unicode格式：U+1234，等价于”U+%04X”<br>%q    该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示<br/></li><li>浮点数与复数<br>%b    无小数部分、二进制指数的科学计数法，如-123456p-78<br>%e    科学计数法，如-1234.456e+78<br>%E    科学计数法，如-1234.456E+78<br>%f    有小数部分但无指数部分，如123.456<br>%F    等价于%f<br>%g    根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）<br>%G    根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go">f := <span class="hljs-number">12.34</span><br>fmt.Printf(<span class="hljs-string">&quot;%b\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%e\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%E\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%f\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%g\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%G\n&quot;</span>, f)<br><br>f := <span class="hljs-number">12.34</span><br>fmt.Printf(<span class="hljs-string">&quot;%b\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%e\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%E\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%f\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%g\n&quot;</span>, f)<br>fmt.Printf(<span class="hljs-string">&quot;%G\n&quot;</span>, f)<br><br><span class="hljs-number">6946802425218990</span>p<span class="hljs-number">-49</span><br><span class="hljs-number">1.234000e+01</span><br><span class="hljs-number">1.234000E+01</span><br><span class="hljs-number">12.340000</span><br><span class="hljs-number">12.34</span><br><span class="hljs-number">12.34</span><br></code></pre></td></tr></table></figure><h2 id="字符串和-byte"><a href="#字符串和-byte" class="headerlink" title="字符串和[]byte"></a>字符串和[]byte</h2><p>%s    直接输出字符串或者[]byte<br>%q    该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示<br>%x    每个字节用两字符十六进制数表示（使用a-f<br>%X    每个字节用两字符十六进制数表示（使用A-F）</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>%p 0x十六进制下地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">10</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;a)<br>fmt.Printf(<span class="hljs-string">&quot;%#p\n&quot;</span>, &amp;a)<br><br><span class="hljs-number">0xc000094000</span><br>c000094000<br></code></pre></td></tr></table></figure><h2 id="宽度标识符"><a href="#宽度标识符" class="headerlink" title="宽度标识符"></a>宽度标识符</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go">%f默认宽度，默认精度<br>%<span class="hljs-number">9</span>f宽度<span class="hljs-number">9</span>，默认精度<br>%<span class="hljs-number">.2</span>f默认宽度，精度<span class="hljs-number">2</span><br>%<span class="hljs-number">9.2</span>f宽度<span class="hljs-number">9</span>，精度<span class="hljs-number">2</span><br>%<span class="hljs-number">9.</span>f宽度<span class="hljs-number">9</span>，精度<span class="hljs-number">0</span><br><br>n := <span class="hljs-number">12.34</span><br>fmt.Printf(<span class="hljs-string">&quot;%f\n&quot;</span>, n)<br>fmt.Printf(<span class="hljs-string">&quot;%9f\n&quot;</span>, n)<br>fmt.Printf(<span class="hljs-string">&quot;%.2f\n&quot;</span>, n)<br>fmt.Printf(<span class="hljs-string">&quot;%9.2f\n&quot;</span>, n)<br>fmt.Printf(<span class="hljs-string">&quot;%9.f\n&quot;</span>, n)<br><br><span class="hljs-number">12.340000</span><br><span class="hljs-number">12.340000</span><br><span class="hljs-number">12.34</span><br>    <span class="hljs-number">12.34</span><br>       <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><h3 id="fmt-Scan"><a href="#fmt-Scan" class="headerlink" title="fmt.Scan"></a>fmt.Scan</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scan</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><br>Scan从标准输入扫描文本，读取由空白符分隔的值保存到传递给本函数的参数中，换行符视为空白符。本函数返回成功扫描的数据个数和遇到的任何错误。如果读取的数据个数比提供的参数少，会返回一个错误报告原因。<br><br>fmt.Scan(&amp;a, &amp;b)<br></code></pre></td></tr></table></figure><h3 id="fmt-Scanf"><a href="#fmt-Scanf" class="headerlink" title="fmt.Scanf"></a>fmt.Scanf</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanf</span><span class="hljs-params">(format <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><br>Scanf从标准输入扫描文本，根据format参数指定的格式去读取由空白符分隔的值保存到传递给本函数的参数中。<br>本函数返回成功扫描的数据个数和遇到的任何错误。<br><br>和c的用法一样<br>fmt.Scanf(<span class="hljs-string">&quot;%v %v&quot;</span>, &amp;a, &amp;b)<br></code></pre></td></tr></table></figure><h3 id="fmt-Scanln"><a href="#fmt-Scanln" class="headerlink" title="fmt.Scanln"></a>fmt.Scanln</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanln</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br></code></pre></td></tr></table></figure><p>Scanln类似Scan，它在遇到换行时才停止扫描。最后一个数据后面必须有换行或者到达结束位置。本函数返回成功扫描的数据个数和遇到的任何错误。</p><h2 id="bufio-NewReader"><a href="#bufio-NewReader" class="headerlink" title="bufio.NewReader"></a>bufio.NewReader</h2><p>有时候我们想完整获取输入的内容，而输入的内容可能包含空格，这种情况下可以使用bufio包来实现。示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bufioDemo</span><span class="hljs-params">()</span></span> &#123;<br>reader := bufio.NewReader(os.Stdin) <span class="hljs-comment">// 从标准输入生成读对象</span><br>fmt.Print(<span class="hljs-string">&quot;请输入内容：&quot;</span>)<br>text, _ := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 读到换行</span><br>text = strings.TrimSpace(text)<br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, text)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Fscan系列"><a href="#Fscan系列" class="headerlink" title="Fscan系列"></a>Fscan系列</h2><p>这几个函数功能分别类似于fmt.Scan、fmt.Scanf、fmt.Scanln三个函数，只不过它们不是从标准输入中读取数据而是从io.Reader中读取数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscan</span><span class="hljs-params">(r io.Reader, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscanln</span><span class="hljs-params">(r io.Reader, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscanf</span><span class="hljs-params">(r io.Reader, format <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br></code></pre></td></tr></table></figure><h2 id="Sscan系列"><a href="#Sscan系列" class="headerlink" title="Sscan系列"></a>Sscan系列</h2><p>这几个函数功能分别类似于fmt.Scan、fmt.Scanf、fmt.Scanln三个函数，只不过它们不是从标准输入中读取数据而是从指定字符串中读取数<br>据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscan</span><span class="hljs-params">(str <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscanln</span><span class="hljs-params">(str <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscanf</span><span class="hljs-params">(str <span class="hljs-keyword">string</span>, format <span class="hljs-keyword">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>golang基础学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go基础学习_1</title>
    <link href="/2022/04/28/golang/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/learn_1/"/>
    <url>/2022/04/28/golang/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/learn_1/</url>
    
    <content type="html"><![CDATA[<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//使用var x type声明并初始化</span><br><span class="hljs-comment">//var 用于声明， 也可以函数内短变量声明 :=</span><br><span class="hljs-comment">//:=等价于 var x type, x = val</span><br><span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;xx&quot;</span><br><span class="hljs-comment">//自动推导</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;xx&quot;</span><br>s := <span class="hljs-string">&quot;xx&quot;</span><br>name, b, c = <span class="hljs-number">12</span>, <span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-number">1.0</span><br><br><span class="hljs-comment">//一般这种写法用于全局变量</span><br><span class="hljs-keyword">var</span>(<br>a <span class="hljs-keyword">type</span>, b type2<br>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意在函数内声明的都要被使用，全局则不需要，使用_匿名变量可以接值。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> a [<span class="hljs-keyword">type</span>] = xx<br><span class="hljs-keyword">const</span> &#123;<br>a = xx<br>b = yy<br>&#125;<br><span class="hljs-keyword">const</span> i, j = <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br><br><span class="hljs-comment">//iota可被编译器修改的常量，一开始是0，每一个新的常量声明使iota增加一次</span><br> <span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span>   <span class="hljs-comment">//0</span><br>b          <span class="hljs-comment">//1</span><br>c          <span class="hljs-comment">//2</span><br>d = <span class="hljs-string">&quot;ha&quot;</span>   <span class="hljs-comment">//独立值，iota += 1</span><br>e          <span class="hljs-comment">//&quot;ha&quot;   iota += 1</span><br>f = <span class="hljs-number">100</span>    <span class="hljs-comment">//iota +=1</span><br>g          <span class="hljs-comment">//100  iota +=1</span><br>h = <span class="hljs-literal">iota</span>   <span class="hljs-comment">//7,恢复计数</span><br>i          <span class="hljs-comment">//8</span><br>)<br><span class="hljs-comment">//上述打印0, 1, 2</span><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">bool</span><br><span class="hljs-keyword">string</span><br><span class="hljs-keyword">uint8</span>, <span class="hljs-keyword">uint16</span>, <span class="hljs-keyword">uint32</span>, <span class="hljs-keyword">uint64</span><br><span class="hljs-keyword">int8</span>, <span class="hljs-keyword">int16</span>, <span class="hljs-keyword">int32</span>, <span class="hljs-keyword">int64</span><br><span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span><br><span class="hljs-keyword">float32</span>, <span class="hljs-keyword">float64</span><br><span class="hljs-keyword">complex64</span>, <span class="hljs-keyword">complex128</span><br>[<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span><span class="hljs-comment">//数组</span><br>[]<span class="hljs-keyword">int</span> <span class="hljs-comment">//切片</span><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>go使用”” 或者 `来创建字符串，前者用来创建可解析的字符串而且支持转义，但不能用来引用多行，反引号用来创建原生的字符串字面值，可以由多行构成，但不能转义。双引号用于创建可解析的字符串，反引号则是原生的字符串，用于书写多行消息，html以及正则。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-string">&quot;xx&quot;</span><br>a := <span class="hljs-string">`</span><br><span class="hljs-string">aabb, </span><br><span class="hljs-string">cc</span><br><span class="hljs-string">`</span><br><br>可以使用+=和 +来连接字符串 <br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>基本和c++一致，不讲</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">18</span><br><span class="hljs-keyword">if</span> a &gt;= <span class="hljs-number">10</span> &#123;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>&#125;<br>注意<span class="hljs-keyword">if</span>里面的<span class="hljs-keyword">bool</span>判断不可以用<span class="hljs-number">0</span>, <span class="hljs-number">1</span>值来判断<br><br>label:<br><span class="hljs-keyword">switch</span>  var1&#123;<br><span class="hljs-keyword">case</span> xx:<br>...<br><span class="hljs-keyword">break</span> label<br><span class="hljs-keyword">case</span> yy:<br>...<br>&#125;<br>注意<span class="hljs-keyword">switch</span>只会跑一个<br><span class="hljs-keyword">fallthrough</span>可以强制做下一个语句<br><span class="hljs-keyword">switch</span> 中加<span class="hljs-keyword">break</span> 可以<span class="hljs-keyword">break</span>到某个标签<br><br></code></pre></td></tr></table></figure><p>同时switch支持多条件匹配</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>流程控制<br>下面这些部分千篇一律，所以只会写与别的语言不一样的地方</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> a := <span class="hljs-number">15</span>; a &gt;= <span class="hljs-number">15</span> &#123;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br><br>&#125;<br><br>Go语言中可以使用<span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span>遍历数组、切片、字符串、<span class="hljs-keyword">map</span> 及通道（channel）。 通过<span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span>遍历的返回值有以下规律：<br><br>数组、切片、字符串返回索引和值。<br><span class="hljs-keyword">map</span>返回键和值。<br>通道（channel）只返回通道内的值。<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go">[num]<span class="hljs-keyword">type</span><br><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">var</span> b = [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(a); i++ &#123;<br>fmt.Println(a[i])<br>&#125;<br><br><span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Println(val)<br>&#125;<br><br><span class="hljs-comment">// 多维数组</span><br>dp := [<span class="hljs-number">3</span>][<span class="hljs-number">2</span>]<span class="hljs-keyword">string</span>&#123;<br>&#123;<span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;ss&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>&#125;.<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v1 := <span class="hljs-keyword">range</span> dp &#123;<br><span class="hljs-keyword">for</span> _, v2 := <span class="hljs-keyword">range</span> v1 &#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意： 多维数组只有第一层可以使用…来让编译器推导数组长度。例如：</strong></p><p>数组是值类型，传参的时候复制整个数组，产生的是副本</p><p>数组支持 “==“、”!=” 操作符，因为内存总是被初始化过的。<br>[n]<em>T表示指针数组，</em>[n]T表示数组指针 。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片（Slice）是一个拥有相同类型元素的可变长度的序列。它是基于数组类型做的一层封装。它非常灵活，支持自动扩容。</p><p>切片是一个引用类型，它的内部结构包含地址、长度和容量。切片一般用于快速地操作一块数据集合。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name[]<span class="hljs-keyword">type</span><br><span class="hljs-keyword">var</span> name = []<span class="hljs-keyword">type</span>&#123;&#125;<br><br><span class="hljs-built_in">len</span>(name) <span class="hljs-built_in">cap</span>(name)分别求长度和容量<br><br>切片表达式[)<br>[<span class="hljs-number">2</span>:] <span class="hljs-comment">//[2, n)</span><br>[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>] <span class="hljs-comment">//[2, 3 - 1]</span><br>[:<span class="hljs-number">3</span>]<br>[:]<br><br>a := b[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>:<span class="hljs-number">5</span>] [low, high, max]<br><span class="hljs-built_in">cap</span>设置为max - low<br><br><span class="hljs-built_in">make</span>([]T, size, <span class="hljs-built_in">cap</span>)<span class="hljs-comment">//构造结构</span><br></code></pre></td></tr></table></figure><p><strong>切片的本质就是对底层数组的封装，它包含了三个信息：底层数组的指针、切片的长度（len）和切片的容量（cap）。</strong></p><p><strong>切片之间不能比较，数组可以</strong><br><strong>切片为空的时候，要用len(s) == 0判断，不能用nil判断，因为nil值的切片长度和容量都是0，但是我们不能说长度和容量为0的一定是nil</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a []<span class="hljs-keyword">int</span>   <span class="hljs-built_in">len</span> = <span class="hljs-built_in">cap</span> = <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span><br>b := []<span class="hljs-keyword">int</span>&#123;&#125;<span class="hljs-built_in">len</span> = <span class="hljs-built_in">cap</span> = <span class="hljs-number">0</span>, not <span class="hljs-literal">nil</span><br>c := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<span class="hljs-built_in">len</span> = <span class="hljs-built_in">cap</span> = <span class="hljs-number">0</span>, not <span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><p>切片赋值拷贝后，共用同一个底层数组，对一个切片修改会影响另一个切片的内容。</p><p>遍历同数组一样</p><p><strong>切片添加元素</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s[]<span class="hljs-keyword">int</span><br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">1</span>)<br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>s = <span class="hljs-built_in">append</span>(s, s1[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>], s2[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>])<br><br><span class="hljs-comment">//零值切片没必要初始化</span><br><span class="hljs-keyword">var</span> a []<span class="hljs-keyword">int</span><br>a = <span class="hljs-built_in">append</span>(a, <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">append</span>()函数将元素追加到切片的最后并返回该切片。切片numSlice的容量按照<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">4</span>，<span class="hljs-number">8</span>，<span class="hljs-number">16</span>这样的规则自动进行扩容，每次扩容后都是扩容前的<span class="hljs-number">2</span>倍。<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>切片本质上是引用类型，如果直接使用赋值，两者底层地址相同，所以要使用copy</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>b := a<br>b[<span class="hljs-number">0</span>] = <span class="hljs-number">4</span><br>fmt.Println(a)<br>fmt.Println(b)<br><br>c := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>d := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>)<br><span class="hljs-comment">//使用copy复制副本</span><br><span class="hljs-built_in">copy</span>(d, c)<br>fmt.Println(b)<br>fmt.Println(c)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>从切片中删除元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//删除索引为2</span><br>a = <span class="hljs-built_in">append</span>(a[:<span class="hljs-number">2</span>], a[<span class="hljs-number">3</span>:])<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go">定义<br><span class="hljs-keyword">map</span>[key]val<br>a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">8</span>)<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span><br><br>a := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>&#123;&#125;<br><br>遍历的话有两种方式<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> a &#123;<br><br>&#125;<br><br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> a &#123;<br><br>&#125;<br><br><span class="hljs-built_in">delete</span>(<span class="hljs-keyword">map</span>, key) <span class="hljs-comment">//删除某个key</span><br><br><span class="hljs-comment">//注意 go底层的map是基于hash table的，所以是无序的</span><br><br>元素为<span class="hljs-keyword">map</span>类型的切片<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> mapSlice = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> index, value := <span class="hljs-keyword">range</span> mapSlice &#123;<br>fmt.Printf(<span class="hljs-string">&quot;index:%d value:%v\n&quot;</span>, index, value)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;after init&quot;</span>)<br><span class="hljs-comment">// 对切片中的map元素进行初始化</span><br>mapSlice[<span class="hljs-number">0</span>] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>, <span class="hljs-number">10</span>)<br>mapSlice[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;小王子&quot;</span><br>mapSlice[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;password&quot;</span>] = <span class="hljs-string">&quot;123456&quot;</span><br>mapSlice[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;address&quot;</span>] = <span class="hljs-string">&quot;沙河&quot;</span><br><span class="hljs-keyword">for</span> index, value := <span class="hljs-keyword">range</span> mapSlice &#123;<br>fmt.Printf(<span class="hljs-string">&quot;index:%d value:%v\n&quot;</span>, index, value)<br>&#125;<br>&#125;<br><br>值为切片类型的<span class="hljs-keyword">map</span><br><span class="hljs-keyword">var</span> slicemap = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>][]<span class="hljs-keyword">string</span>, <span class="hljs-number">3</span>)<br>v, ok := slicemap[key]<br><span class="hljs-keyword">if</span> !ok &#123;<br>v = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>golang基础学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/27/hello-world/"/>
    <url>/2022/04/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>大学</tag>
      
      <tag>大学2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test_my_site</title>
    <link href="/2022/01/15/test-my-site/"/>
    <url>/2022/01/15/test-my-site/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
